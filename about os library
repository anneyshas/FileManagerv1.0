Python os Library

Python OS module allows us to use the operating system dependent functionalities and to interact with the underlying operating system in several different ways. For example, we can work with files, change the environment variables, and we can move files around, etc. This is as same as overriding all the os built-in functionalities in a module and using them in a file I/O and system handling.
OS Module Common Functions
OS module provides some callable methods and some variables. Some of the common methods for different functional categories are:
1.	Manipulating directories:
•	chdir()
•	getcwd()
•	listdir()
•	mkdir()
•	makedirs()
•	rmdir()
•	removedirs()
2.	Removing a file:
•	remove()
3.	Renaming files/directories:
•	rename()
4.	Using more than one process:
•	system()
•	popen()
•	close()
•	walk()
5.	User id and process id:
•	getgid(), os.getuid(), os.getpid()
6.	More about directories and files:
•	error
•	stat()
7.	Cross-plateform os attributes:
•	name
8.	Accessing environment variables:
•	environ
funtions we used 
os.rename():to rename a file or a folder.In arguments pass the original file name first and then the new name of the file.
7.	os.listdir(): It returns a list of files and the folders in the current directory.

8.	os.path module is sub-module of OS module in Python used for common pathname manipulation.
9.	os.path.join() method in Python join one or more path components intelligently. This method concatenates various path components with exactly one directory separator (‘/’) following each non-empty part except the last path component. If the last path component to be joined is empty then a directory seperator (‘/’) is put at the end.
If a path component represents an absolute path, then all previous components joined are discarded and joining continues from the absolute path component.
10.	os.remove(): It removes the path of a file. It takes path string as a variable.
